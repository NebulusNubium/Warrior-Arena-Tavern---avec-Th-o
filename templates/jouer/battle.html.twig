{% extends 'base.html.twig' %}

{% block title %}Résultat de la bataille{% endblock %}

{% block body %}
<h1>Résultat de la bataille</h1>
<div class="row">
    <div class="col-md-6">
        <h2>Votre équipe</h2>
        <div class="character-list" style="display: flex; flex-wrap: wrap; gap: 1em;">
            {% for character in my_team %}
                <div class="character-item" id="char-L{{ character.id }}" style="border: 1px solid #ccc; padding: 1em; border-radius: 8px; width: 180px; text-align: center;">
                    <h3>{{ character.name }}</h3>
                    <div>PV: <span class="hp" id="hp-L{{ character.id }}">{{ character.HP }}</span></div>
                </div>
            {% endfor %}
        </div>
    </div>
    <div class="col-md-6">
        <h2>Adversaire : {{ opponent.username }}</h2>
        <div class="character-list" style="display: flex; flex-wrap: wrap; gap: 1em;">
            {% for character in opponent_team %}
                <div class="character-item" id="char-R{{ character.id }}" style="border: 1px solid #ccc; padding: 1em; border-radius: 8px; width: 180px; text-align: center;">
                    <h3>{{ character.name }}</h3>
                    <div>PV: <span class="hp" id="hp-R{{ character.id }}">{{ character.HP }}</span></div>
                </div>
            {% endfor %}
        </div>
    </div>
</div>
<div class="mt-4 row">
    <div class="col-md-8 text-center">
        <button id="play-battle" class="btn btn-danger btn-lg">Lancer l'animation</button>
    </div>
    <div class="col-md-4">
        <h4>Journal du combat</h4>
        <div id="battle-log" style="margin-top:1em; min-height:2em; max-height:400px; overflow-y:auto; border:1px solid #ccc; border-radius:8px; background:#fafafa; padding:1em;"></div>
        <div id="battle-winner" style="margin-top:1em; font-weight:bold; font-size:1.2em;"></div>
    </div>
</div>
<style>
.glow-red { box-shadow: 0 0 20px 5px #ff0000; background: #ffeaea; }
.glow-black { box-shadow: 0 0 20px 5px #000; background: #222; color: #fff; }
.dead { opacity: 0.5; filter: grayscale(1); }
</style>
<script>
// Minimal data passed to template: a BattleSetupDTO-like structure and unit maps.
const setup = {{ setup|json_encode|raw }};
const unitMap = {{ unit_map|json_encode|raw }};
const unitOwners = {{ unit_owners|json_encode|raw }};
// frames/result are no longer produced by the controller. Implement the battle logic here.
let frames = [];
let currentFrame = 0;
let interval = null;

function updateFrame(idx) {
    // Reset all glows
    document.querySelectorAll('.character-item').forEach(el => {
        el.classList.remove('glow-red','glow-black','dead');
    });
    if (!frames[idx]) return;
    // Update HP
    Object.entries(frames[idx].hpByUnit).forEach(([uid, hp]) => {
        const el = document.getElementById('hp-' + uid);
        if (el) el.textContent = hp;
        const box = document.getElementById('char-' + uid);
        if (box && hp <= 0) box.classList.add('dead');
    });
    // Animate actions
    (frames[idx].actions || []).forEach(action => {
        if (action.kind === 'ATTACK' || action.kind === 'HEAL') {
            const actor = document.getElementById('char-' + action.actorId);
            const target = action.targetId ? document.getElementById('char-' + action.targetId) : null;
            if (actor) actor.classList.add('glow-red');
            if (target) target.classList.add(action.kind === 'ATTACK' ? 'glow-black' : 'glow-red');
        }
    });
    // Log events (append as a new line)
    const logDiv = document.getElementById('battle-log');
    if ((frames[idx].events || []).length > 0) {
        (frames[idx].events || []).forEach(ev => {
            const p = document.createElement('div');
            p.textContent = ev;
            logDiv.appendChild(p);
            logDiv.scrollTop = logDiv.scrollHeight;
        });
    }
}

document.getElementById('play-battle').addEventListener('click', function() {
    // Clear any previous run
    if (interval) clearInterval(interval);
    currentFrame = 0;
    document.getElementById('battle-log').innerHTML = '';
    document.getElementById('battle-winner').textContent = '';

    // Example starter: build a trivial single-frame 'frames' array showing initial HPs.
    frames = [{
        tick: 0,
        actions: [],
        hpByUnit: Object.fromEntries(Object.entries(unitMap).map(([uid, u]) => [uid, u.HP ?? u.hp ?? 1])),
        events: ['Battle started']
    }];

    updateFrame(0);
    interval = setInterval(() => {
        currentFrame++;
        if (currentFrame >= frames.length) {
            clearInterval(interval);
            document.getElementById('battle-winner').textContent = 'No winner (implement combat logic)';
            const p = document.createElement('div');
            p.textContent = 'Fin du combat.';
            document.getElementById('battle-log').appendChild(p);
            return;
        }
        updateFrame(currentFrame);
    }, 1200);
});
</script>

<div style="margin-top:1em; font-size:0.9em; color:#666;">Debug setup JSON (use this to implement your engine):
    <pre style="white-space:pre-wrap; max-height:200px; overflow:auto; background:#f6f6f6; padding:0.5em; border-radius:6px;">{{ setup|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}</pre>
</div>
{% endblock %}
