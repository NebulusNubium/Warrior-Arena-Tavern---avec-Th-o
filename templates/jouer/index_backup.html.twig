{% extends 'base.html.twig' %}

{% block title %}Composer une équipe{% endblock %}

{% block body %}
<img src="{{ asset('bottom.png') }}" alt="Décoration" class="form-page-decoration">

<div class="play-page">
    <h1 class="play-title">Composer votre équipe</h1>
    
    <!-- Plateau de jeu -->
    <div class="battle-board">
        <img src="{{ asset('bagarre.png') }}" alt="Plateau de combat">
        <div class="board-overlay">Arène de Combat</div>
    </div>
    
    <!-- Sélection des personnages -->
    <div class="characters-selection">
        <div class="section-header">
            <h2 class="section-title">Choisissez vos champions</h2>
            <span class="subtitle">Sélectionner 5 champions, ctrl+click pour sélectionner</span>
        </div>
        
        <!-- Filtres -->
        <div class="character-filters">
            <div class="filter-group">
                <label for="role-filter" class="filter-label">
                    <i class="fas fa-user-shield"></i> Filtrer par rôle :
                </label>
                <select id="role-filter" class="filter-select">
                    <option value="">Tous les rôles</option>
                    {% for role in roles %}
                        <option value="{{ role.id }}" {% if current_role == role.id %}selected{% endif %}>
                            {{ role.name }}
                        </option>
                    {% endfor %}
                </select>
            </div>
            
            <div class="filter-group">
                <label for="type-filter" class="filter-label">
                    <i class="fas fa-tags"></i> Filtrer par type :
                </label>
                <select id="type-filter" class="filter-select">
                    <option value="">Tous les types</option>
                    {% for type in types %}
                        <option value="{{ type.id }}" {% if current_type == type.id %}selected{% endif %}>
                            {{ type.name }}
                        </option>
                    {% endfor %}
                </select>
            </div>
            
            <button type="button" class="filter-reset" id="reset-filters">
                <i class="fas fa-times"></i> Réinitialiser
            </button>
        </div>

        <form id="team-form" method="post">
            <div class="character-grid">
                {% if characters|length == 0 %}
                    <div class="no-characters-message">
                        <i class="fas fa-search"></i>
                        <p>Aucun personnage trouvé avec ces filtres.</p>
                        <p>Essayez de modifier vos critères de recherche.</p>
                    </div>
                {% else %}
                    {% for character in characters %}
                    <div class="character-card" 
                         data-character-id="{{ character.id }}" 
                         data-index="{{ loop.index0 }}"
                         {% if character.role %}data-role="{{ character.role.name|lower }}"{% endif %}>
                        <div class="selection-indicator"></div>
                        
                        {% if character.imageName %}
                            <img src="{{ asset('uploads/images/' ~ character.imageName) }}" 
                                 alt="{{ character.name }}" 
                                 class="character-avatar">
                        {% else %}
                            <div class="character-avatar placeholder">?</div>
                        {% endif %}
                        
                        <h3 class="character-name">{{ character.name }}</h3>
                        
                        <div class="character-role">
                            {% if character.role %}
                                {% set roleClass = character.role.name|lower %}
                                {% if roleClass == 'tank' %}
                                    <i class="fa-solid fa-shield-halved role-icon tank"></i>
                                {% elseif roleClass == 'healer' or roleClass == 'heal' %}
                                    <i class="fa-solid fa-heart role-icon healer"></i>
                                {% else %}
                                    <i class="fa-solid fa-burst role-icon dps"></i>
                                {% endif %}
                                <span class="role-name">{{ character.role.name }}</span>
                            {% endif %}
                        </div>
                        
                        <div class="character-quick-stats">
                            <div class="stat">
                                <span class="stat-label">PV</span>
                                <span class="stat-value">{{ character.HP }}</span>
                            </div>
                            <div class="stat">
                                <span class="stat-label">ATK</span>
                                <span class="stat-value">{{ character.power }}</span>
                            </div>
                            <div class="stat">
                                <span class="stat-label">DEF</span>
                                <span class="stat-value">{{ character.defense }}</span>
                            </div>
                        </div>
                        
                        <input type="checkbox" name="team[]" value="{{ character.id }}" class="character-checkbox" style="display:none;">
                    </div>
                {% endfor %}
                {% endif %}
            </div>
            
            <div class="play-section">
                <div class="team-counter">
                    Équipe sélectionnée : <span class="count" id="team-count">0</span>/5
                </div>
                <button type="submit" class="play-btn" id="play-btn" disabled>Commencer le Combat !</button>
            </div>
        </form>
    </div>
</div>

<!-- Modale de détails du personnage -->
<div class="character-modal" id="character-modal">
    <div class="modal-content">
        <button class="modal-close" id="modal-close">&times;</button>
        <div class="modal-header">
            <img src="" alt="" class="modal-avatar" id="modal-avatar">
            <h3 class="modal-name" id="modal-name"></h3>
            <div class="modal-role" id="modal-role"></div>
        </div>
        <div class="modal-stats" id="modal-stats">
            <div class="stat">
                <span class="stat-value" id="modal-hp"></span>
                <span class="stat-label">Points de Vie</span>
            </div>
            <div class="stat">
                <span class="stat-value" id="modal-power"></span>
                <span class="stat-label">Puissance</span>
            </div>
            <div class="stat">
                <span class="stat-value" id="modal-defense"></span>
                <span class="stat-label">Défense</span>
            </div>
        </div>
        <div class="modal-description">
            <h4>Description</h4>
            <p id="modal-description-text"></p>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const characterCards = document.querySelectorAll('.character-card');
    const checkboxes = document.querySelectorAll('.character-checkbox');
    const playBtn = document.getElementById('play-btn');
    const teamCountEl = document.getElementById('team-count');
    const modal = document.getElementById('character-modal');
    const modalClose = document.getElementById('modal-close');
    
    // Données des personnages pour la modale
    let charactersData = {
        {% for character in characters %}
        {{ character.id }}: {
            name: "{{ character.name }}",
            hp: {{ character.HP }},
            power: {{ character.power }},
            defense: {{ character.defense }},
            description: "{{ character.description|escape('js') }}",
            imageName: "{{ character.imageName }}",
            role: {% if character.role %}"{{ character.role.name }}"{% else %}null{% endif %}
        }{% if not loop.last %},{% endif %}
        {% endfor %}
    };

    function updateTeamCounter() {
        const currentCheckboxes = document.querySelectorAll('.character-checkbox');
        const currentCards = document.querySelectorAll('.character-card');
        const selectedCount = Array.from(currentCheckboxes).filter(cb => cb.checked).length;
        teamCountEl.textContent = selectedCount;
        playBtn.disabled = selectedCount !== 5;
        
        // Mettre à jour l'apparence des cartes
        currentCards.forEach((card, idx) => {
            if (currentCheckboxes[idx] && currentCheckboxes[idx].checked) {
                card.classList.add('selected');
            } else {
                card.classList.remove('selected');
            }
        });
    }

    // Gestion de la sélection et de la modale avec délégation d'événements
    const characterGrid = document.getElementById('character-grid');
    
    characterGrid.addEventListener('click', function(e) {
        const card = e.target.closest('.character-card');
        if (!card) return;
        
        // Empêcher le déclenchement multiple si on clique sur la checkbox
        if (e.target.tagName.toLowerCase() === 'input') return;
        
        // Trouver l'index de cette carte
        const allCards = Array.from(document.querySelectorAll('.character-card'));
        const cardIndex = allCards.indexOf(card);
        const allCheckboxes = document.querySelectorAll('.character-checkbox');
        
        console.log('Clic sur carte index:', cardIndex, 'Total cartes:', allCards.length);
        
        // Si on maintient Ctrl/Cmd ou on clique sur l'indicateur de sélection, on sélectionne
        if (e.ctrlKey || e.metaKey || e.target.classList.contains('selection-indicator')) {
            e.preventDefault();
            console.log('Mode sélection activé');
            
            if (allCheckboxes[cardIndex]) {
                // Limiter à 5 sélections maximum
                const currentlySelected = Array.from(allCheckboxes).filter(cb => cb.checked).length;
                if (!allCheckboxes[cardIndex].checked && currentlySelected >= 5) {
                    alert('Vous ne pouvez sélectionner que 5 personnages maximum !');
                    return;
                }
                
                allCheckboxes[cardIndex].checked = !allCheckboxes[cardIndex].checked;
                console.log('Checkbox changée:', allCheckboxes[cardIndex].checked);
                updateTeamCounter();
                return;
            } else {
                console.log('Pas de checkbox trouvée à l\'index', cardIndex);
            }
        }
        
        // Sinon, on ouvre la modale
        const characterId = card.dataset.characterId;
        const character = charactersData[characterId];
        
        if (character) {
            // Remplir la modale avec les données
            document.getElementById('modal-name').textContent = character.name;
            document.getElementById('modal-hp').textContent = character.hp;
            document.getElementById('modal-power').textContent = character.power;
            document.getElementById('modal-defense').textContent = character.defense;
            document.getElementById('modal-description-text').textContent = character.description || "Aucune description disponible.";
            
            // Image
            const modalAvatar = document.getElementById('modal-avatar');
            if (character.imageName) {
                modalAvatar.src = "{{ asset('uploads/images/') }}" + character.imageName;
                modalAvatar.alt = character.name;
                modalAvatar.style.display = 'block';
            } else {
                modalAvatar.style.display = 'none';
            }
            
            // Rôle
            const modalRole = document.getElementById('modal-role');
            if (character.role) {
                modalRole.innerHTML = '<span class="role-name">' + character.role + '</span>';
                modalRole.style.display = 'flex';
            } else {
                modalRole.style.display = 'none';
            }
            
            modal.classList.add('active');
        }
    });
    
    // Fermeture de la modale
    modalClose.addEventListener('click', function() {
        modal.classList.remove('active');
    });
    
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.classList.remove('active');
        }
    });
    
    // Fermeture avec Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && modal.classList.contains('active')) {
            modal.classList.remove('active');
        }
    });

    updateTeamCounter();
    
    // Gestion des filtres Ajax
    const roleFilter = document.getElementById('role-filter');
    const typeFilter = document.getElementById('type-filter');
    const resetButton = document.getElementById('reset-filters');
    const characterGrid = document.querySelector('.character-grid');
    
    // Fonction pour appliquer les filtres en Ajax
    async function applyFilters() {
        const roleValue = roleFilter.value;
        const typeValue = typeFilter.value;
        
        // Construire les paramètres de requête
        const params = new URLSearchParams();
        if (roleValue) params.set('role', roleValue);
        if (typeValue) params.set('type', typeValue);
        
        try {
            // Ajouter un indicateur de chargement
            characterGrid.style.opacity = '0.5';
            characterGrid.style.pointerEvents = 'none';
            
            console.log('Filtrage avec:', { role: roleValue, type: typeValue });
            
            // Faire la requête Ajax
            const response = await fetch(`{{ path('jouer') }}?${params.toString()}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            
            console.log('Statut de la réponse:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Erreur HTTP:', response.status, errorText);
                throw new Error(`Erreur HTTP ${response.status}`);
            }
            
            const responseText = await response.text();
            console.log('Réponse brute:', responseText.substring(0, 200) + '...');
            
            let characters;
            try {
                characters = JSON.parse(responseText);
            } catch (parseError) {
                console.error('Erreur de parsing JSON:', parseError);
                console.error('Réponse complète:', responseText);
                throw new Error('Réponse invalide du serveur');
            }
            
            console.log('Personnages reçus:', characters.length);
            
            // Reconstruire la grille
            rebuildCharacterGrid(characters);
            
            // Mettre à jour l'URL sans rechargement
            const newUrl = params.toString() ? `${window.location.pathname}?${params.toString()}` : window.location.pathname;
            window.history.pushState(null, '', newUrl);
            
        } catch (error) {
            console.error('Erreur complète:', error);
            alert('Erreur lors du filtrage: ' + error.message);
        } finally {
            // Retirer l'indicateur de chargement
            characterGrid.style.opacity = '1';
            characterGrid.style.pointerEvents = 'auto';
        }
    }
    
    // Fonction pour reconstruire la grille de personnages
    function rebuildCharacterGrid(characters) {
        if (characters.length === 0) {
            characterGrid.innerHTML = `
                <div class="no-characters-message">
                    <i class="fas fa-search"></i>
                    <p>Aucun personnage trouvé avec ces filtres.</p>
                    <p>Essayez de modifier vos critères de recherche.</p>
                </div>
            `;
            return;
        }
        
        let html = '';
        characters.forEach((character, index) => {
            const roleClass = character.role ? character.role.name.toLowerCase() : '';
            const roleIcon = getRoleIcon(roleClass);
            
            html += `
                <div class="character-card" 
                     data-character-id="${character.id}" 
                     data-index="${index}"
                     ${character.role ? `data-role="${character.role.name.toLowerCase()}"` : ''}>
                    <div class="selection-indicator"></div>
                    
                    ${character.imageName ? 
                        `<img src="{{ asset('uploads/images/') }}${character.imageName}" 
                             alt="${character.name}" 
                             class="character-avatar">` :
                        `<div class="character-avatar placeholder">?</div>`
                    }
                    
                    <h3 class="character-name">${character.name}</h3>
                    
                    <div class="character-role">
                        ${character.role ? `
                            <i class="fa-solid ${roleIcon.icon} role-icon ${roleIcon.class}"></i>
                            <span class="role-name">${character.role.name}</span>
                        ` : ''}
                    </div>
                    
                    <div class="character-quick-stats">
                        <div class="stat">
                            <span class="stat-label">PV</span>
                            <span class="stat-value">${character.hp}</span>
                        </div>
                        <div class="stat">
                            <span class="stat-label">ATK</span>
                            <span class="stat-value">${character.power}</span>
                        </div>
                        <div class="stat">
                            <span class="stat-label">DEF</span>
                            <span class="stat-value">${character.defense}</span>
                        </div>
                    </div>
                    
                    <input type="checkbox" name="team[]" value="${character.id}" class="character-checkbox" style="display:none;">
                </div>
            `;
        });
        
        characterGrid.innerHTML = html;
        
        // Réinitialiser les données des personnages pour la modale
        updateCharactersData(characters);
    }
    
    // Fonction pour obtenir l'icône selon le rôle
    function getRoleIcon(roleClass) {
        if (roleClass === 'tank') {
            return { icon: 'fa-shield-halved', class: 'tank' };
        } else if (roleClass === 'healer' || roleClass === 'heal') {
            return { icon: 'fa-heart', class: 'healer' };
        } else {
            return { icon: 'fa-burst', class: 'dps' };
        }
    }
    
    // Fonction pour mettre à jour les données des personnages
    function updateCharactersData(characters) {
        charactersData = {};
        characters.forEach(character => {
            charactersData[character.id] = {
                name: character.name,
                hp: character.hp,
                power: character.power,
                defense: character.defense,
                description: character.description,
                imageName: character.imageName,
                role: character.role ? character.role.name : null
            };
        });
    }
    
    // Événements pour les filtres
    roleFilter.addEventListener('change', applyFilters);
    typeFilter.addEventListener('change', applyFilters);
    
    resetButton.addEventListener('click', function() {
        roleFilter.value = '';
        typeFilter.value = '';
        applyFilters();
    });
});
</script>

{% endblock %}
